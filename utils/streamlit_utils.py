import datetime
import streamlit as st
import pandas as pd
from google.cloud import bigquery

def log_vote_to_bq(client: bigquery.Client, full_table_path: str, vote_type: str, question: str, summary: str):
    """
    Logs user feedback (upvote/downvote) to a specified BigQuery table.

    Args:
        client (bigquery.Client): An initialized BigQuery client.
        full_table_path (str): The full BigQuery table path (e.g., "project.dataset.table").
        vote_type (str): The type of vote ("UP" for üëç, "DOWN" for üëé).
        question (str): The original question asked by the user.
        summary (str): The summary provided by the chatbot.
    """
    user_email = st.session_state.get("user", {}).get("email", "unknown")
    question_id = st.session_state.get("question_id", "unknown")
    rows = [{
        "vote_type": vote_type,
        "question_id": question_id,
        "user_email": user_email,
        "timestamp": datetime.datetime.utcnow().isoformat()
    }]
    errors = client.insert_rows_json(full_table_path, rows)
    if errors:
        st.error(f"üî¥ Error logging vote to BigQuery: {errors}")

def log_interaction_to_bq(client: bigquery.Client, full_table_path: str, question: str, sql: str, summary: str):
    """
    Logs a user interaction (question, generated SQL, and summary) to a specified BigQuery table.

    Args:
        client (bigquery.Client): An initialized BigQuery client.
        full_table_path (str): The full BigQuery table path (e.g., "project.dataset.table").
        question (str): The original question asked by the user.
        sql (str): The SQL query generated by the chatbot.
        summary (str): The natural language summary provided by the chatbot.
    """
    question_id = st.session_state.get("question_id", "unknown")
    user_email = st.session_state.get("user", {}).get("email", "unknown")
    rows = [{
        "question": question,
        "question_id": question_id,
        "user_email": user_email,
        "generated_sql": sql,
        "summary": summary,
        "timestamp": datetime.datetime.utcnow().isoformat()
    }]
    errors = client.insert_rows_json(full_table_path, rows)
    if errors:
        st.error(f"üî¥ Error logging interaction to BigQuery: {errors}")

def log_error_to_bq(client: bigquery.Client, full_table_path: str, question: str, sql: str, error_msg: str, attempt: int):
    """
    Logs an error that occurred during SQL generation or BigQuery execution to a specified table.

    Args:
        client (bigquery.Client): An initialized BigQuery client.
        full_table_path (str): The full BigQuery table path (e.g., "project.dataset.table").
        question (str): The original question asked by the user.
        sql (str): The SQL query (if any) that caused the error.
        error_msg (str): The error message.
        attempt (int): The attempt number at which the error occurred.
    """
    rows = [{
        "timestamp": datetime.datetime.utcnow().isoformat(),
        "question": question,
        "generated_sql": sql,
        "error_message": error_msg,
        "attempt": attempt
    }]
    errors = client.insert_rows_json(full_table_path, rows)
    if errors:
        st.error(f"üî¥ Failed to log error to BigQuery: {errors}")

def log_zero_result_to_bq(bq_client: bigquery.Client, table_name: str, question: str, sql: str, attempt_number: int):
    """
    Logs instances where a generated SQL query returned no results to a specified table.

    Args:
        bq_client (bigquery.Client): An initialized BigQuery client.
        table_name (str): The full BigQuery table path (e.g., "project.dataset.table").
        question (str): The original question asked by the user.
        sql (str): The SQL query that returned no results.
        attempt_number (int): The attempt number at which zero results were returned.
    """
    rows_to_insert = [{
        "question": question,
        "sql": sql,
        "attempt_number": attempt_number,
        "timestamp": datetime.datetime.utcnow().isoformat()
    }]
    errors = bq_client.insert_rows_json(table_name, rows_to_insert)
    if errors:
        st.error(f"üî¥ Failed to log zero result to BigQuery: {errors}")

# Note: row_to_sentence was moved to llm_utils.py as it's directly used for LLM input